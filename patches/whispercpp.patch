diff -ruN whispercpp-new-org/CMakeLists.txt whispercpp-new-patched/CMakeLists.txt
--- whispercpp-new-org/CMakeLists.txt	2023-06-28 21:34:50.000000000 +0200
+++ whispercpp-new-patched/CMakeLists.txt	2023-08-08 16:01:23.703449243 +0200
@@ -131,27 +131,10 @@
 if (WHISPER_OPENBLAS)
     set(WHISPER_BLAS_VENDOR "OpenBLAS")
     set(WHISPER_BLAS ON)
+    set(WHISPER_EXTRA_FLAGS ${WHISPER_EXTRA_FLAGS} -DGGML_USE_OPENBLAS)
+    set(WHISPER_EXTRA_LIBS ${WHISPER_EXTRA_LIBS} ${BLAS_LIB_PATH})
 endif()
 
-if (WHISPER_BLAS)
-    set(BLA_STATIC 1)
-    set(BLA_VENDOR ${WHISPER_BLAS_VENDOR})
-#    set(BLA_PREFER_PKGCONFIG 1)
-    set(BLA_SIZEOF_INTEGER 8)
-    find_package(BLAS)
-
-    if(BLAS_FOUND)
-        message(STATUS "BLAS compatible library found")
-        message(STATUS "Libraries ${BLAS_LIBRARIES}")
-        set(WHISPER_EXTRA_FLAGS ${WHISPER_EXTRA_FLAGS} -DGGML_USE_OPENBLAS)
-
-        include_directories(${BLAS_INCLUDE_DIRS})
-        set(WHISPER_EXTRA_LIBS ${WHISPER_EXTRA_LIBS} ${BLAS_LIBRARIES})
-    else()
-        message(WARNING "BLAS library was not found")
-    endif()
-endif ()
-
 if (WHISPER_CUBLAS)
     cmake_minimum_required(VERSION 3.17)
 
@@ -364,7 +347,7 @@
 
 install(TARGETS ${TARGET}
     LIBRARY DESTINATION lib
-    ARCHIVE DESTINATION lib/static
+    ARCHIVE DESTINATION lib
     RUNTIME DESTINATION bin
     PUBLIC_HEADER DESTINATION include
     )
diff -ruN whispercpp-new-org/ggml.c whispercpp-new-patched/ggml.c
--- whispercpp-new-org/ggml.c	2023-06-28 21:34:50.000000000 +0200
+++ whispercpp-new-patched/ggml.c	2023-06-30 16:59:43.031593572 +0200
@@ -3826,6 +3826,7 @@
     bool   mem_buffer_owned;
     bool   no_alloc;
     bool   no_alloc_save; // this is used to save the no_alloc state when using scratch buffers
+    bool   stop;
 
     int    n_objects;
 
@@ -4195,6 +4196,14 @@
     return ctx;
 }
 
+void ggml_cancel(struct ggml_context * ctx) {
+    ctx->stop = true;
+}
+
+void ggml_cancel_clear(struct ggml_context * ctx) {
+    ctx->stop = false;
+}
+
 void ggml_free(struct ggml_context * ctx) {
     // make this function thread safe
     ggml_critical_section_start();
@@ -16958,7 +16967,7 @@
     const int64_t perf_start_cycles  = ggml_perf_cycles();
     const int64_t perf_start_time_us = ggml_perf_time_us();
 
-    for (int i = 0; i < cgraph->n_nodes; i++) {
+    for (int i = 0; i < cgraph->n_nodes && !ctx->stop; i++) {
         GGML_PRINT_DEBUG_5("%s: %d/%d\n", __func__, i, cgraph->n_nodes);
 
         struct ggml_tensor * node = cgraph->nodes[i];
@@ -16988,7 +16997,7 @@
                 atomic_store(&state_shared.has_work, false);
             }
 
-            while (atomic_load(&state_shared.has_work)) {
+            while (atomic_load(&state_shared.has_work) && !ctx->stop) {
                 ggml_lock_lock  (&state_shared.spin);
                 ggml_lock_unlock(&state_shared.spin);
             }
@@ -17007,7 +17016,7 @@
 
             atomic_fetch_sub(&state_shared.n_ready, 1);
 
-            while (atomic_load(&state_shared.n_ready) > 0) {
+            while (atomic_load(&state_shared.n_ready) > 0 && !ctx->stop) {
                 ggml_lock_lock  (&state_shared.spin);
                 ggml_lock_unlock(&state_shared.spin);
             }
@@ -17024,14 +17033,14 @@
                 atomic_store(&state_shared.has_work, false);
             }
 
-            while (atomic_load(&state_shared.has_work)) {
+            while (atomic_load(&state_shared.has_work) && !ctx->stop) {
                 ggml_lock_lock  (&state_shared.spin);
                 ggml_lock_unlock(&state_shared.spin);
             }
 
             atomic_fetch_sub(&state_shared.n_ready, 1);
 
-            while (atomic_load(&state_shared.n_ready) != 0) {
+            while (atomic_load(&state_shared.n_ready) != 0 && !ctx->stop) {
                 ggml_lock_lock  (&state_shared.spin);
                 ggml_lock_unlock(&state_shared.spin);
             }
@@ -17043,7 +17052,7 @@
                 atomic_store(&state_shared.has_work, false);
             }
 
-            while (atomic_load(&state_shared.has_work)) {
+            while (atomic_load(&state_shared.has_work) && !ctx->stop) {
                 ggml_lock_lock  (&state_shared.spin);
                 ggml_lock_unlock(&state_shared.spin);
             }
@@ -17062,7 +17071,7 @@
 
             atomic_fetch_sub(&state_shared.n_ready, 1);
 
-            while (atomic_load(&state_shared.n_ready) > 0) {
+            while (atomic_load(&state_shared.n_ready) > 0 && !ctx->stop) {
                 ggml_lock_lock  (&state_shared.spin);
                 ggml_lock_unlock(&state_shared.spin);
             }
@@ -17079,14 +17088,14 @@
                 atomic_store(&state_shared.has_work, false);
             }
 
-            while (atomic_load(&state_shared.has_work)) {
+            while (atomic_load(&state_shared.has_work) && !ctx->stop) {
                 ggml_lock_lock  (&state_shared.spin);
                 ggml_lock_unlock(&state_shared.spin);
             }
 
             atomic_fetch_sub(&state_shared.n_ready, 1);
 
-            while (atomic_load(&state_shared.n_ready) != 0) {
+            while (atomic_load(&state_shared.n_ready) != 0 && !ctx->stop) {
                 ggml_lock_lock  (&state_shared.spin);
                 ggml_lock_unlock(&state_shared.spin);
             }
diff -ruN whispercpp-new-org/ggml.h whispercpp-new-patched/ggml.h
--- whispercpp-new-org/ggml.h	2023-06-28 21:34:50.000000000 +0200
+++ whispercpp-new-patched/ggml.h	2023-06-30 16:48:11.388231793 +0200
@@ -503,6 +503,9 @@
     GGML_API struct ggml_context * ggml_init(struct ggml_init_params params);
     GGML_API void                  ggml_free(struct ggml_context * ctx);
 
+    GGML_API void    ggml_cancel(struct ggml_context * ctx);
+    GGML_API void    ggml_cancel_clear(struct ggml_context * ctx);
+
     GGML_API size_t  ggml_used_mem(const struct ggml_context * ctx);
 
     GGML_API size_t  ggml_set_scratch (struct ggml_context * ctx, struct ggml_scratch scratch);
diff -ruN whispercpp-new-org/whisper.cpp whispercpp-new-patched/whisper.cpp
--- whispercpp-new-org/whisper.cpp	2023-06-28 21:34:50.000000000 +0200
+++ whispercpp-new-patched/whisper.cpp	2023-06-30 17:02:11.271599681 +0200
@@ -665,6 +665,9 @@
     // [EXPERIMENTAL] speed-up techniques
     int32_t exp_n_audio_ctx = 0; // 0 - use default
 
+    bool stop = false;
+    ggml_context * gctx = nullptr;
+
     void use_buf(struct ggml_context * ctx, int i) {
 #if defined(WHISPER_USE_SCRATCH)
         size_t last_size = 0;
@@ -1440,6 +1443,8 @@
     };
 
     struct ggml_context * ctx0 = ggml_init(params);
+    wctx.state->gctx = ctx0;
+    if (wctx.state->stop) ggml_cancel(ctx0);
 
     wstate.use_buf(ctx0, 0);
 
@@ -1849,6 +1854,7 @@
     //        wstate.get_buf_max_mem(2)/1024.0/1024.0,
     //        wstate.get_buf_max_mem(3)/1024.0/1024.0);
 
+    wctx.state->gctx = nullptr;
     ggml_free(ctx0);
 
     wstate.t_encode_us += ggml_time_us() - t_start_us;
@@ -4083,6 +4089,8 @@
             return -6;
         }
 
+        if (ctx->state->stop) return -100;
+
         // if there is a very short audio segment left to process, we remove any past prompt since it tends
         // to confuse the decoder and often make it repeat or hallucinate stuff
         if (seek > seek_start && seek + 500 >= seek_end) {
@@ -4166,6 +4174,8 @@
                     return -7;
                 }
 
+                if (ctx->state->stop) return -100;
+
                 {
                     const int64_t t_start_sample_us = ggml_time_us();
 
@@ -4404,6 +4414,8 @@
                         return -8;
                     }
 
+                    if (ctx->state->stop) return -100;
+
                     {
                         const int64_t t_start_sample_us = ggml_time_us();
 
@@ -4607,9 +4619,19 @@
         }
     }
 
+    if (ctx->state->stop) return -100;
+
     return 0;
 }
 
+void whisper_cancel(struct whisper_context * ctx) {
+    ctx->state->stop = true;
+    if (ctx->state->gctx) ggml_cancel(ctx->state->gctx);
+}
+
+void whisper_cancel_clear(struct whisper_context * ctx) {
+    ctx->state->stop = false;
+}
 
 int whisper_full(
         struct whisper_context * ctx,
diff -ruN whispercpp-new-org/whisper.h whispercpp-new-patched/whisper.h
--- whispercpp-new-org/whisper.h	2023-06-28 21:34:50.000000000 +0200
+++ whispercpp-new-patched/whisper.h	2023-06-30 16:41:06.091547614 +0200
@@ -115,6 +115,10 @@
     WHISPER_API void whisper_free_state(struct whisper_state * state);
     WHISPER_API void whisper_free_params(struct whisper_full_params * params);
 
+    // Cancel any ongoing operation
+    WHISPER_API void whisper_cancel(struct whisper_context * ctx);
+    WHISPER_API void whisper_cancel_clear(struct whisper_context * ctx);
+
     // Convert RAW PCM audio to log mel spectrogram.
     // The resulting spectrogram is stored inside the default state of the provided whisper context.
     // Returns 0 on success
