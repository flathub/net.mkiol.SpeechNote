diff -ruN whispercpp-1.6.2-org/cmake/DefaultTargetOptions.cmake whispercpp-1.6.2-patched/cmake/DefaultTargetOptions.cmake
--- whispercpp-1.6.2-org/cmake/DefaultTargetOptions.cmake	2024-05-27 09:35:09.000000000 +0200
+++ whispercpp-1.6.2-patched/cmake/DefaultTargetOptions.cmake	2024-05-26 18:00:38.405498253 +0200
@@ -9,9 +9,13 @@
         cxx_std_11
     )
 
+if (NOT DEFINED CMAKE_INSTALL_RPATH)
+    set(CMAKE_INSTALL_RPATH "${CMAKE_INSTALL_PREFIX}/lib")
+endif()
+
 set_target_properties(${TARGET}
     PROPERTIES
         EXPORT_COMPILE_COMMANDS ON
         RUNTIME_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/bin"
-        INSTALL_RPATH "${CMAKE_INSTALL_PREFIX}/lib"
+        INSTALL_RPATH ${CMAKE_INSTALL_RPATH}
 )
diff -ruN whispercpp-1.6.2-org/CMakeLists.txt whispercpp-1.6.2-patched/CMakeLists.txt
--- whispercpp-1.6.2-org/CMakeLists.txt	2024-05-27 09:35:09.000000000 +0200
+++ whispercpp-1.6.2-patched/CMakeLists.txt	2024-05-28 18:39:24.101390460 +0200
@@ -248,91 +248,11 @@
 if (WHISPER_OPENBLAS)
     set(WHISPER_BLAS_VENDOR "OpenBLAS")
     set(WHISPER_BLAS ON)
-    # BLA_PKGCONFIG_BLAS is supported since CMake 3.25.
-    # FindBLAS.cmake pkg-config logic seems incomplete, because when
-    # BLA_SIZEOF_INTEGER is 8, then it should search for blas64 instead of blas.
-    # blas.pc/blas64.pc are not always provided, so let's be more specific
-    # and go with openblas.pc/openblas64.pc if WHISPER_OPENBLAS is on.
-    if (WHISPER_OPENBLAS_INTERFACE64)
-        set(WHISPER_BLAS_LIB "openblas64")
-    else ()
-        set(WHISPER_BLAS_LIB "openblas")
-    endif ()
-    set(BLA_PKGCONFIG_BLAS ${WHISPER_BLAS_LIB})
-    # OpenBLAS prebuilt libraries for Windows do not have "64" suffix in filename.
-    # (But .pc file has "64" suffix in filename for USE_64BITINT=1 Windows build.)
-    if (MSVC)
-        set(WHISPER_BLAS_LIB "openblas")
-    endif ()
+    set(WHISPER_EXTRA_FLAGS ${WHISPER_EXTRA_FLAGS} -DGGML_USE_OPENBLAS)
+    set(WHISPER_EXTRA_LIBS ${WHISPER_EXTRA_LIBS} ${BLAS_LIB_PATH})
+    include_directories(${BLAS_INC_DIR})
 endif()
 
-if (WHISPER_BLAS)
-    if (NOT "$ENV{OPENBLAS_PATH}" STREQUAL "")
-        if (WHISPER_STATIC)
-            set(WHISPER_BLAS_LIB_PREFIX ${CMAKE_STATIC_LIBRARY_PREFIX})
-            set(WHISPER_BLAS_LIB_SUFFIX ${CMAKE_STATIC_LIBRARY_SUFFIX})
-        else ()
-            if (CMAKE_IMPORT_LIBRARY_SUFFIX)
-                set(WHISPER_BLAS_LIB_PREFIX ${CMAKE_IMPORT_LIBRARY_PREFIX})
-                set(WHISPER_BLAS_LIB_SUFFIX ${CMAKE_IMPORT_LIBRARY_SUFFIX})
-            else ()
-                set(WHISPER_BLAS_LIB_PREFIX ${CMAKE_SHARED_LIBRARY_PREFIX})
-                set(WHISPER_BLAS_LIB_SUFFIX ${CMAKE_SHARED_LIBRARY_SUFFIX})
-            endif ()
-        endif ()
-        # OpenBLAS prebuilt libraries hardcode "lib" prefix in filename even on Windows
-        if (WHISPER_OPENBLAS)
-            set(WHISPER_BLAS_LIB_PREFIX "lib")
-        endif ()
-        message(STATUS "BLAS compatible library path provided")
-        set(BLAS_LIBRARIES "$ENV{OPENBLAS_PATH}/lib/${WHISPER_BLAS_LIB_PREFIX}${WHISPER_BLAS_LIB}${WHISPER_BLAS_LIB_SUFFIX}")
-        message(STATUS "Libraries ${BLAS_LIBRARIES}")
-        set(BLAS_INCLUDE_DIRS "$ENV{OPENBLAS_PATH}/include")
-        message(STATUS "Include dirs ${BLAS_INCLUDE_DIRS}")
-        if (NOT EXISTS "${BLAS_LIBRARIES}")
-            message(FATAL_ERROR "BLAS library was not found. Environment variable OPENBLAS_PATH misdefined.")
-        endif ()
-        set(WHISPER_EXTRA_FLAGS ${WHISPER_EXTRA_FLAGS} -DGGML_USE_OPENBLAS)
-        include_directories(${BLAS_INCLUDE_DIRS})
-        set(WHISPER_EXTRA_LIBS ${WHISPER_EXTRA_LIBS} ${BLAS_LIBRARIES})
-    else ()
-        if (WHISPER_STATIC)
-            # FindBLAS.cmake pkg-config logic seems incomplete, because when
-            # BLA_STATIC is on, then it should use pkg_check_modules_static
-            # instead of pkg_check_modules.
-            # Some manual variable overriding may be necessary if you don't
-            # achieve desired results.
-            set(BLA_STATIC 1)
-        endif ()
-        set(BLA_VENDOR ${WHISPER_BLAS_VENDOR})
-        if (WHISPER_OPENBLAS_INTERFACE64)
-            set(BLA_SIZEOF_INTEGER 8)
-        else ()
-            set(BLA_SIZEOF_INTEGER 4)
-        endif()
-        set(BLA_PREFER_PKGCONFIG 1)
-        find_package(BLAS)
-
-        if(BLAS_FOUND)
-            message(STATUS "BLAS compatible library found")
-            message(STATUS "Libraries ${BLAS_LIBRARIES}")
-            if (NOT DEFINED BLAS_INCLUDE_DIRS)
-                if (PKGC_BLAS_FOUND)
-                    set(BLAS_INCLUDE_DIRS "${PKGC_BLAS_INCLUDE_DIRS}")
-                else ()
-                    find_path(BLAS_INCLUDE_DIRS cblas.h /usr/include/openblas)
-                endif()
-            endif()
-            message(STATUS "Include dirs ${BLAS_INCLUDE_DIRS}")
-            set(WHISPER_EXTRA_FLAGS ${WHISPER_EXTRA_FLAGS} -DGGML_USE_OPENBLAS)
-            include_directories(${BLAS_INCLUDE_DIRS})
-            set(WHISPER_EXTRA_LIBS ${WHISPER_EXTRA_LIBS} ${BLAS_LIBRARIES})
-        else()
-            message(FATAL_ERROR "BLAS library was not found")
-        endif()
-    endif ()
-endif ()
-
 if (WHISPER_MKL)
     find_package(MKL CONFIG REQUIRED PATHS $ENV{MKLROOT})
     message(STATUS "Imported oneMKL targets: ${MKL_IMPORTED_TARGETS}")
@@ -380,13 +300,12 @@
 
 
 if (WHISPER_HIPBLAS)
-    list(APPEND CMAKE_PREFIX_PATH /opt/rocm)
-    if (NOT ${CMAKE_C_COMPILER_ID} MATCHES "Clang")
-        message(WARNING "Only LLVM is supported for HIP, hint: CC=/opt/rocm/llvm/bin/clang")
-    endif()
-    if (NOT ${CMAKE_CXX_COMPILER_ID} MATCHES "Clang")
-        message(WARNING "Only LLVM is supported for HIP, hint: CXX=/opt/rocm/llvm/bin/clang++")
-    endif()
+    set(ROCM_PATH /opt/rocm CACHE STRING "ROCm root dir")
+    list(APPEND CMAKE_PREFIX_PATH ${ROCM_PATH})
+    message(STATUS "using ROCm root path ${ROCM_PATH}")
+
+    set(CMAKE_C_COMPILER ${ROCM_PATH}/llvm/bin/clang)
+    set(CMAKE_CXX_COMPILER ${ROCM_PATH}/llvm/bin/clang++)
 
     find_package(hip)
     find_package(hipblas)
@@ -659,7 +578,11 @@
 # whisper - this is the main library of the project
 #
 
-set(TARGET whisper)
+if (NOT DEFINED WHISPER_TARGET_NAME)
+    set(WHISPER_TARGET_NAME whisper)
+endif()
+
+set(TARGET ${WHISPER_TARGET_NAME})
 
 add_library(${TARGET}
     ggml.h
@@ -683,7 +606,7 @@
     .
 )
 # Set the version numbers
-set_target_properties(whisper PROPERTIES
+set_target_properties(${TARGET} PROPERTIES
     VERSION ${PROJECT_VERSION}
     SOVERSION ${SOVERSION}
 )
@@ -745,8 +668,20 @@
         set(GGML_CUDA_ARCHITECTURES 52 61 70)
     endif()
     message(STATUS "GGML Configuring CUDA architectures ${GGML_CUDA_ARCHITECTURES}")
-    set_property(TARGET whisper PROPERTY CUDA_ARCHITECTURES ${GGML_CUDA_ARCHITECTURES})
-    set_property(TARGET whisper PROPERTY CUDA_SELECT_NVCC_ARCH_FLAGS "Auto")
+    set_property(TARGET ${TARGET} PROPERTY CUDA_ARCHITECTURES ${GGML_CUDA_ARCHITECTURES})
+    set_property(TARGET ${TARGET} PROPERTY CUDA_SELECT_NVCC_ARCH_FLAGS "Auto")
+endif()
+
+if (GGML_SOURCES_ROCM)
+    message(STATUS "GGML ROCM sources found, configuring ROCM architecture")
+    # Only configure gmml ROCM architectures is not globally set
+    if (NOT DEFINED GGML_ROCM_ARCHITECTURES)
+        # Not overriden by user, so set defaults
+        set(GGML_ROCM_ARCHITECTURES "gfx1010 gfx1030 gfx1100")
+    endif()
+    string(REPLACE " " " --offload-arch=" HIP_OPTS ${GGML_ROCM_ARCHITECTURES})
+    set(HIP_OPTS "--offload-arch=${HIP_OPTS}")
+    set_target_properties(${TARGET} PROPERTIES COMPILE_FLAGS ${HIP_OPTS})
 endif()
 
 if (EMSCRIPTEN)
@@ -764,7 +699,7 @@
 
 install(TARGETS ${TARGET}
     LIBRARY  DESTINATION lib
-    ARCHIVE  DESTINATION lib/static
+    ARCHIVE  DESTINATION lib
     RUNTIME  DESTINATION bin
     RESOURCE DESTINATION bin
     PUBLIC_HEADER DESTINATION include
