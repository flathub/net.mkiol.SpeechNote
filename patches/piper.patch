diff -ruN piper-org/CMakeLists.txt piper-patched/CMakeLists.txt
--- piper-org/CMakeLists.txt	1970-01-01 01:00:00.000000000 +0100
+++ piper-patched/CMakeLists.txt	2023-06-28 11:19:02.452202472 +0200
@@ -0,0 +1,36 @@
+cmake_minimum_required(VERSION 3.5)
+
+project(piper_api C CXX)
+
+set(CMAKE_CXX_STANDARD 17)
+set(CMAKE_CXX_STANDARD_REQUIRED ON)
+
+add_library(piper_api STATIC piper_api.cpp src/cpp/piper.cpp)
+
+find_package(PkgConfig)
+pkg_check_modules(ESPEAK_NG REQUIRED espeak-ng<2)
+
+find_library(onnxruntime_path onnxruntime REQUIRED)
+
+target_link_libraries(piper_api
+  ${onnxruntime_path}
+  pthread
+  ${ESPEAK_NG_LIBRARIES})
+
+target_link_directories(piper_api PUBLIC
+  ${ESPEAK_NG_LIBRARY_DIRS}
+  ${CMAKE_LIBRARY_PATH})
+
+target_include_directories(piper_api PUBLIC
+  ${ESPEAK_NG_INCLUDE_DIRS}
+  ${CMAKE_INCLUDE_PATH})
+
+target_compile_options(piper_api PUBLIC
+  ${ESPEAK_NG_CFLAGS_OTHER})
+
+set_target_properties(piper_api PROPERTIES PUBLIC_HEADER "piper_api.h")
+
+install(TARGETS piper_api
+    LIBRARY DESTINATION lib
+    ARCHIVE DESTINATION lib
+    PUBLIC_HEADER DESTINATION include)
diff -ruN piper-org/piper_api.cpp piper-patched/piper_api.cpp
--- piper-org/piper_api.cpp	1970-01-01 01:00:00.000000000 +0100
+++ piper-patched/piper_api.cpp	2023-06-27 19:18:21.610102443 +0200
@@ -0,0 +1,51 @@
+#include "piper_api.h"
+#include "src/cpp/piper.hpp"
+
+#include <algorithm>
+#include <optional>
+#include <fstream>
+#include <stdexcept>
+
+struct piper_api::ctx {
+    piper::PiperConfig config;
+    piper::Voice voice;
+};
+
+piper_api::piper_api(std::string model_path, std::string model_config_path, std::string espeak_ng_data_path) {
+    m_ctx = std::make_unique<ctx>();
+
+    m_ctx->config.eSpeakDataPath = std::move(espeak_ng_data_path);
+
+    piper::initialize(m_ctx->config);
+
+    std::optional<piper::SpeakerId> speaker_id;
+
+    piper::loadVoice(m_ctx->config, std::move(model_path), std::move(model_config_path), m_ctx->voice, speaker_id);
+}
+
+piper_api::~piper_api() {
+    piper::terminate(m_ctx->config);
+}
+
+std::vector<int16_t> piper_api::text_to_audio(std::string text) {
+    std::vector<int16_t> out_buf;
+    std::vector<int16_t> tmp_buf;
+
+    piper::SynthesisResult result;
+
+    piper::textToAudio(m_ctx->config, m_ctx->voice, std::move(text), tmp_buf, result, [&]{
+        out_buf.insert(out_buf.cend(), tmp_buf.cbegin(), tmp_buf.cend());
+    });
+
+    return out_buf;
+}
+
+void piper_api::text_to_wav_file(std::string text, const std::string& wav_file_path) {
+    std::ofstream out_file{wav_file_path, std::ios::out};
+
+    if (!out_file) throw std::runtime_error("failed to open file");
+
+    piper::SynthesisResult result;
+
+    piper::textToWavFile(m_ctx->config, m_ctx->voice, std::move(text), out_file, result);
+}
diff -ruN piper-org/piper_api.h piper-patched/piper_api.h
--- piper-org/piper_api.h	1970-01-01 01:00:00.000000000 +0100
+++ piper-patched/piper_api.h	2023-06-24 18:18:24.151028699 +0200
@@ -0,0 +1,23 @@
+#ifndef PIPER_API_H
+#define PIPER_API_H
+
+#define PIPER_API_EXPORT __attribute__((visibility("default")))
+
+#include <string>
+#include <optional>
+#include <vector>
+#include <memory>
+
+class PIPER_API_EXPORT piper_api {
+public:
+    piper_api(std::string model_path, std::string model_config_path, std::string espeak_ng_data_path = {});
+    ~piper_api();
+    std::vector<int16_t> text_to_audio(std::string text);
+    void text_to_wav_file(std::string text, const std::string& wav_file_path);
+
+private:
+    struct ctx;
+    std::unique_ptr<ctx> m_ctx;
+};
+
+#endif  // DSNOTE_APP_H
\ No newline at end of file
