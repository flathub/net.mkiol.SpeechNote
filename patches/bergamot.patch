diff -ruN '--exclude=*.user' bergamot-org/3rd_party/marian-dev/CMakeLists.txt bergamot-patched/3rd_party/marian-dev/CMakeLists.txt
--- bergamot-org/3rd_party/marian-dev/CMakeLists.txt	2023-07-08 17:36:56.190113017 +0200
+++ bergamot-patched/3rd_party/marian-dev/CMakeLists.txt	2023-07-31 16:16:57.177324709 +0200
@@ -57,6 +57,17 @@
 option(USE_SIMD_UTILS "Enable simde to target instruction sets" OFF)
 option(COMPILE_WITHOUT_EXCEPTIONS "Compile without exceptions" OFF)
 
+option(USE_INTRINSICS_SSE2 "Compile with SSE2" ON)
+option(USE_INTRINSICS_SSE3 "Compile with SSE3" ON)
+option(USE_INTRINSICS_SSE41 "Compile wit SSE4.1" ON)
+option(USE_INTRINSICS_SSE42 "Compile with SSE4.2" ON)
+option(USE_INTRINSICS_AVX "Compile with AVX" ON)
+option(USE_INTRINSICS_AVX2 "Compile with AVX2" ON)
+option(USE_INTRINSICS_AVX512 "Compile with AVX512" ON)
+option(USE_INTRINSICS_FMA "Compile with FMA" ON)
+option(USE_INTRINSICS_ARMV7_NEON "Compile with NEON" OFF)
+option(USE_INTRINSICS_ARMV7_NEONVFPV4 "Compile with NEON vfpv4" OFF)
+
 # cmake options that are dependent on USE_WASM_COMPATIBLE_SOURCE cmake option
 CMAKE_DEPENDENT_OPTION(USE_THREADS "Compile with multi-threading support" OFF
                        "USE_WASM_COMPATIBLE_SOURCE" ON)
@@ -82,7 +93,6 @@
 
   # Define that we are using ARM
   add_compile_definitions(ARM)
-  #
 else()
   set(USE_INTGEMM ON)
 endif()
@@ -93,7 +103,11 @@
 
 if(USE_SIMD_UTILS)
   if(${CMAKE_TARGET_ARCHITECTURE_CODE} MATCHES "arm")
-    add_compile_definitions(ARM FMA SSE) #added for ARM
+    if(USE_INTRINSICS_FMA)
+      add_compile_definitions(ARM FMA SSE)
+    else()
+      add_compile_definitions(ARM SSE)
+    endif(USE_INTRINSICS_FMA)
   endif()
   if(MSVC)
     add_compile_options(/flax-vector-conversions)
@@ -254,58 +268,60 @@
     message(FATAL_ERROR "FATAL ERROR: Compiling Marian requires at least g++ 5.0, your version is ${CMAKE_CXX_COMPILER_VERSION}")
   endif()
 
-  # Detect support CPU instrinsics for the current platform. This will
-  # only by used with BUILD_ARCH=native. For overridden BUILD_ARCH we
-  # minimally use -msse4.1. This seems to work with MKL.
+  # Detect support CPU instrinsics for the current platform.
   set(INTRINSICS "")
   list(APPEND INTRINSICS_NVCC)
 
-  if(BUILD_ARCH STREQUAL "native")
-    message(STATUS "Checking support for CPU intrinsics")
-    include(FindSSE)
-    if(SSE2_FOUND)
-      message(STATUS "SSE2 support found")
+  if(CMAKE_SYSTEM_PROCESSOR STREQUAL x86_64 OR CMAKE_SYSTEM_PROCESSOR STREQUAL amd64)
+    if(USE_INTRINSICS_SSE2)
+      message(STATUS "SSE2 support enabled")
       set(INTRINSICS "${INTRINSICS} -msse2")
       list(APPEND INTRINSICS_NVCC -Xcompiler\ -msse2)
-    endif(SSE2_FOUND)
-    if(SSE3_FOUND)
-      message(STATUS "SSE3 support found")
+    endif(USE_INTRINSICS_SSE2)
+    if(USE_INTRINSICS_SSE3)
+      message(STATUS "SSE3 support enabled")
       set(INTRINSICS "${INTRINSICS} -msse3")
       list(APPEND INTRINSICS_NVCC -Xcompiler\ -msse3)
-    endif(SSE3_FOUND)
-    if(SSE4_1_FOUND)
-      message(STATUS "SSE4.1 support found")
+    endif(USE_INTRINSICS_SSE3)
+    if(USE_INTRINSICS_SSE41)
+      message(STATUS "SSE4.1 support enabled")
       set(INTRINSICS "${INTRINSICS} -msse4.1")
       list(APPEND INTRINSICS_NVCC -Xcompiler\ -msse4.1)
-    endif(SSE4_1_FOUND)
-    if(SSE4_2_FOUND)
-      message(STATUS "SSE4.2 support found")
+    endif(USE_INTRINSICS_SSE41)
+    if(USE_INTRINSICS_SSE42)
+      message(STATUS "SSE4.2 support enabled")
       set(INTRINSICS "${INTRINSICS} -msse4.2")
       list(APPEND INTRINSICS_NVCC -Xcompiler\ -msse4.2)
-    endif(SSE4_2_FOUND)
-    if(AVX_FOUND)
-      message(STATUS "AVX support found")
+    endif(USE_INTRINSICS_SSE42)
+    if(USE_INTRINSICS_AVX)
+      message(STATUS "AVX support enabled")
       set(INTRINSICS "${INTRINSICS} -mavx")
       list(APPEND INTRINSICS_NVCC -Xcompiler\ -mavx)
-    endif(AVX_FOUND)
-    if(AVX2_FOUND)
-      message(STATUS "AVX2 support found")
+    endif(USE_INTRINSICS_AVX)
+    if(USE_INTRINSICS_AVX2)
+      message(STATUS "AVX2 support enabled")
       set(INTRINSICS "${INTRINSICS} -mavx2")
       list(APPEND INTRINSICS_NVCC -Xcompiler\ -mavx2)
-    endif(AVX2_FOUND)
-    if(AVX512_FOUND)
-      message(STATUS "AVX512 support found")
+    endif(USE_INTRINSICS_AVX2)
+    if(USE_INTRINSICS_AVX512)
+      message(STATUS "AVX512 support enabled")
       set(INTRINSICS "${INTRINSICS} -mavx512f")
       list(APPEND INTRINSICS_NVCC -Xcompiler\ -mavx512f)
-    endif(AVX512_FOUND)
-  elseif(COMPILE_WASM)
+    endif(USE_INTRINSICS_AVX512)
+  elseif(CMAKE_SYSTEM_PROCESSOR STREQUAL armv7l)
+    if(USE_INTRINSICS_ARMV7_NEON)
+      message(STATUS "NEON support enabled")
+      set(INTRINSICS "${INTRINSICS} -mfpu=neon -mfloat-abi=hard")
+    elseif(USE_INTRINSICS_ARMV7_NEONVFPV4)
+      message(STATUS "NEON vfpv4 support enabled")
+      set(INTRINSICS "${INTRINSICS} -mfpu=neon-vfpv4 -mfloat-abi=hard")
+    endif()
+  endif()
+
+  if(COMPILE_WASM)
     # Can't set to -msse4.1 because onnxjs doesn't compile with this flag. It can be upgraded to
     # -msse4.1 once marian can solely be compiled with intgemm ("onnxjs" will be removed in that case)
     set(INTRINSICS "-mssse3 -msimd128")
-  else()
-    if(CMAKE_SYSTEM_PROCESSOR STREQUAL x86_64 OR CMAKE_SYSTEM_PROCESSOR STREQUAL amd64)
-      set(INTRINSICS "-msse4.1")
-    endif ()
   endif()
 
   if(USE_FBGEMM)
@@ -322,7 +338,7 @@
   set(DISABLE_GLOBALLY "-Wno-unused-result ${CLANG_IGNORE_UNKNOWN_CUDA} ${CLANG_IGNORE_UNUSED_VALUES} ${ARM_WARNINGS}") # This needs to appear here as well to appease clang11+ on linux
 
   # These are used in src/CMakeLists.txt on a per-target basis
-  list(APPEND ALL_WARNINGS -Wall; -Werror; -Wextra; -Wno-unused-result; -Wno-deprecated;
+  list(APPEND ALL_WARNINGS -Wall; -Wextra; -Wno-unused-result; -Wno-deprecated;
     -Wno-pragmas; -Wno-unused-parameter; -Wno-unused-function;
     -Wno-unused-value; -Wno-unknown-pragmas; -Wno-sign-compare;
     -Wno-missing-field-initializers; -Wno-use-after-free; -Wno-restrict; ${CLANG_IGNORE_UNUSED_PRIVATE_FIELD})
@@ -334,7 +350,7 @@
 
   if(CMAKE_COMPILER_IS_GNUCC)
     # these flags are not known to clang
-    set(CMAKE_GCC_FLAGS "-Wl,--no-as-needed")
+    set(CMAKE_GCC_FLAGS "-Wl,--no-as-needed -D_FILE_OFFSET_BITS=64")
     set(CMAKE_RDYNAMIC_FLAG "-rdynamic")
   endif(CMAKE_COMPILER_IS_GNUCC)
 
@@ -606,7 +622,7 @@
   endif(USE_INTGEMM)
 
   if(USE_RUY OR USE_RUY_SGEMM)
-    set(EXT_LIBS ${EXT_LIBS} ruy) 
+    set(EXT_LIBS ${EXT_LIBS} ruy)
   endif(USE_RUY OR USE_RUY_SGEMM)
 
   add_definitions(-DCOMPILE_CPU=1)        # Move the compile CPU definition on top since we want to compile intgemm when we set compile CPU
@@ -626,6 +642,8 @@
     add_definitions(-DBLAS_FOUND=1)
   elseif(USE_RUY_SGEMM)
     add_compile_definitions(USE_RUY_SGEMM=1)
+    set(EXT_LIBS ${EXT_LIBS} ${BLAS_LIB_PATH})
+    include_directories(${BLAS_INC_DIR})
   else(USE_ONNX_SGEMM)
     if(USE_MKL)
       find_package(MKL)
@@ -636,16 +654,9 @@
       set(BLAS_FOUND TRUE)
       add_definitions(-DBLAS_FOUND=1 -DMKL_FOUND=1)
     else(MKL_FOUND)
-      set(BLAS_VENDOR "OpenBLAS")
-      find_package(BLAS)
-      if(BLAS_FOUND)
-        include(FindCBLAS)
-        if(CBLAS_FOUND)
-          include_directories(${BLAS_INCLUDE_DIR} ${CBLAS_INCLUDE_DIR})
-          set(EXT_LIBS ${EXT_LIBS} ${BLAS_LIBRARIES} ${CBLAS_LIBRARIES})
-          add_definitions(-DBLAS_FOUND=1)
-        endif(CBLAS_FOUND)
-      endif(BLAS_FOUND)
+      set(EXT_LIBS ${EXT_LIBS} ${BLAS_LIB_PATH})
+      include_directories(${BLAS_INC_DIR})
+      add_definitions(-DBLAS_FOUND=1)
     endif(MKL_FOUND)
   endif(USE_ONNX_SGEMM)
 
diff -ruN '--exclude=*.user' bergamot-org/3rd_party/marian-dev/src/3rd_party/intgemm/CMakeLists.txt bergamot-patched/3rd_party/marian-dev/src/3rd_party/intgemm/CMakeLists.txt
--- bergamot-org/3rd_party/marian-dev/src/3rd_party/intgemm/CMakeLists.txt	2023-07-08 17:37:11.273446808 +0200
+++ bergamot-patched/3rd_party/marian-dev/src/3rd_party/intgemm/CMakeLists.txt	2023-07-20 14:56:52.285377752 +0200
@@ -13,7 +13,7 @@
 if(MSVC)
   add_compile_options(/W4 /WX)
 else()
-  add_compile_options(-Wall -Wextra -pedantic -Werror -Wno-unknown-pragmas)
+  add_compile_options(-Wall -Wextra -pedantic -Wno-unknown-pragmas)
   if (COMPILE_WASM)
     # Disabling Pthreads + memory growth warning to be an error for WASM
     # Pthreads + memory growth causes JS accessing the wasm memory to be slow
diff -ruN '--exclude=*.user' bergamot-org/3rd_party/marian-dev/src/3rd_party/simd_utils/neon_mathfun.h bergamot-patched/3rd_party/marian-dev/src/3rd_party/simd_utils/neon_mathfun.h
--- bergamot-org/3rd_party/marian-dev/src/3rd_party/simd_utils/neon_mathfun.h	2023-07-08 17:37:23.063447169 +0200
+++ bergamot-patched/3rd_party/marian-dev/src/3rd_party/simd_utils/neon_mathfun.h	2023-07-30 18:56:02.133335033 +0200
@@ -257,6 +257,12 @@
 
 #else /* FMA */
 
+#ifdef __arm__
+static inline float32x4_t vfmaq_n_f32(float32x4_t a, float32x4_t b, float32_t n) {
+    return vmlaq_f32(a, b, vdupq_n_f32(n));
+}
+#endif
+
 // FMA version
 static inline v4sf log_ps(v4sf x)
 {
diff -ruN '--exclude=*.user' bergamot-org/3rd_party/marian-dev/src/common/binary.cpp bergamot-patched/3rd_party/marian-dev/src/common/binary.cpp
--- bergamot-org/3rd_party/marian-dev/src/common/binary.cpp	2023-07-08 17:36:56.233446352 +0200
+++ bergamot-patched/3rd_party/marian-dev/src/common/binary.cpp	2023-07-29 19:12:08.582096263 +0200
@@ -19,7 +19,7 @@
   uint64_t dataLength;
 };
 
-// cast current void pointer to T pointer and move forward by num elements 
+// cast current void pointer to T pointer and move forward by num elements
 template <typename T>
 const T* get(const void*& current, uint64_t num = 1) {
   const T* ptr = (const T*)current;
@@ -27,14 +27,21 @@
   return ptr;
 }
 
+template <typename T>
+T getValue(const void*& current, uint64_t num = 1) {
+  T value;
+  memcpy(&value, get<T>(current, num), sizeof(value));
+  return value;
+}
+
 void loadItems(const void* current, std::vector<io::Item>& items, bool mapped) {
-  uint64_t binaryFileVersion = *get<uint64_t>(current);
+  uint64_t binaryFileVersion = getValue<uint64_t>(current);
   ABORT_IF(binaryFileVersion != BINARY_FILE_VERSION,
            "Binary file versions do not match: {} (file) != {} (expected)",
            binaryFileVersion,
            BINARY_FILE_VERSION);
 
-  uint64_t numHeaders = *get<uint64_t>(current); // number of item headers that follow
+  uint64_t numHeaders = getValue<uint64_t>(current); // number of item headers that follow
   const Header* headers = get<Header>(current, numHeaders); // read that many headers
 
   // prepopulate items with meta data from headers
@@ -48,13 +55,13 @@
   // read in actual shape and data
   for(int i = 0; i < numHeaders; ++i) {
     uint64_t len = headers[i].shapeLength;
-    items[i].shape.resize(len); 
+    items[i].shape.resize(len);
     const int* arr = get<int>(current, len); // read shape
-    std::copy(arr, arr + len, items[i].shape.begin()); // copy to Item::shape 
+    std::copy(arr, arr + len, items[i].shape.begin()); // copy to Item::shape
   }
 
   // move by offset bytes, aligned to 256-bytes boundary
-  uint64_t offset = *get<uint64_t>(current);
+  uint64_t offset = getValue<uint64_t>(current);
   get<char>(current, offset);
 
   for(int i = 0; i < numHeaders; ++i) {
@@ -173,8 +180,8 @@
 
   // Write out all values
   for(const auto& item : items)
-    pos += out.write(item.data(), item.bytes.size()); // writes out data with padding, keeps 256-byte boundary. 
-                                                      // Amazingly this is binary-compatible with V1 and aligned and 
+    pos += out.write(item.data(), item.bytes.size()); // writes out data with padding, keeps 256-byte boundary.
+                                                      // Amazingly this is binary-compatible with V1 and aligned and
                                                       // non-aligned models can be read with the same procedure.
                                                       // No version-bump required. Gets 5-8% of speed back when mmapped.
 }
diff -ruN '--exclude=*.user' bergamot-org/3rd_party/marian-dev/src/layers/lsh.cpp bergamot-patched/3rd_party/marian-dev/src/layers/lsh.cpp
--- bergamot-org/3rd_party/marian-dev/src/layers/lsh.cpp	2023-07-08 17:36:56.240113019 +0200
+++ bergamot-patched/3rd_party/marian-dev/src/layers/lsh.cpp	2023-07-22 12:16:53.558584438 +0200
@@ -2,9 +2,7 @@
 #include "graph/expression_operators.h"
 #include "tensors/cpu/prod_blas.h"
 
-#if BLAS_FOUND
 #include "faiss/IndexLSH.h"
-#endif
 
 namespace marian {
 
@@ -14,7 +12,6 @@
 }
 
 Expr LSH::search(Expr query, Expr values) {
-#if BLAS_FOUND
   ABORT_IF(query->graph()->getDeviceId().type == DeviceType::gpu,
            "LSH index (--output-approx-knn) currently not implemented for GPU");
 
@@ -29,8 +26,8 @@
 
     if(!index_ || indexHash_ != values->hash()) {
       LOG(info, "Building LSH index for vector dim {} and with hash size {} bits", dim, nbits_);
-      index_.reset(new faiss::IndexLSH(dim, nbits_, 
-                                       /*rotate=*/dim != nbits_, 
+      index_.reset(new faiss::IndexLSH(dim, nbits_,
+                                       /*rotate=*/dim != nbits_,
                                        /*train_thesholds*/false));
       int vRows = values->shape().elements() / dim;
       index_->train(vRows, values->val()->data<float>());
@@ -44,7 +41,7 @@
 
     index_->search(qRows, query->val()->data<float>(), k_,
                    distances.data(), ids.data());
-    
+
     std::vector<IndexType> vOut;
     vOut.reserve(ids.size());
     for(auto id : ids)
@@ -54,10 +51,6 @@
   };
 
   return lambda({query, values}, kShape, Type::uint32, forward);
-#else
-  query; values;
-  ABORT("LSH output layer requires a CPU BLAS library");
-#endif
 }
 
 Expr LSH::affine(Expr idx, Expr input, Expr W, Expr b) {
@@ -72,7 +65,7 @@
     int dimIn   = inputs[1]->shape()[-1];
     int dimOut  = out->shape()[-1];
     int dimRows = out->shape().elements() / dimOut;
-    
+
     auto outPtr   = out->val()->data<float>();
     auto idxPtr   = inputs[0]->val()->data<uint32_t>();
     auto queryPtr = inputs[1]->val()->data<float>();
@@ -87,7 +80,7 @@
         int relPos = currIdxPtr[k];                   // k-th best vocabulay item
         auto currWPtr      = WPtr + relPos * dimIn;   // offset for k-th best embedding
         currOutPtr[relPos] = bPtr ? bPtr[relPos] : 0; // write bias value to position, init to 0 if no bias given
-        
+
         // proceed one vector product at a time writing to the correct position
         sgemm(false, true, 1, 1, dimIn, 1.0f, currQueryPtr, dimIn, currWPtr, dimIn, 1.0f, &currOutPtr[relPos], 1);
       }
@@ -98,7 +91,7 @@
   if(b) // bias is optional
     nodes.push_back(b);
 
-  return lambda(nodes, 
+  return lambda(nodes,
                 outShape,
                 input->value_type(),
                 forward);
@@ -107,7 +100,7 @@
 // @TODO: alternative version which does the same as above with Marian operators, currently missing "scatter".
 // this uses more memory and likely to be slower. Would make sense to have a scatter node that actually creates
 // the node instead of relying on an existing node, e.g. scatter(shape, defaultValue, axis, indices, values);
-#if 0 
+#if 0
 Expr LSH::affine(Expr idx, Expr input, Expr W, Expr b) {
   int dim  = input->shape()[-1];
   int bch  = idx->shape().elements() / k;
@@ -120,8 +113,8 @@
   int dimVoc  = Wt_->shape()[-2];
   auto oShape = input->shape();
   oShape.set(-1, dimVoc);
-  auto lowest = graph_->constant(oShape, 
-                                 inits::fromValue(NumericLimits<float>(input->value_type()).lowest), 
+  auto lowest = graph_->constant(oShape,
+                                 inits::fromValue(NumericLimits<float>(input->value_type()).lowest),
                                  input->value_type());
   return scatter(lowest, -1, idx, aff);
 }
diff -ruN '--exclude=*.user' bergamot-org/3rd_party/marian-dev/src/layers/lsh.h bergamot-patched/3rd_party/marian-dev/src/layers/lsh.h
--- bergamot-org/3rd_party/marian-dev/src/layers/lsh.h	2023-07-22 12:04:17.035228319 +0200
+++ bergamot-patched/3rd_party/marian-dev/src/layers/lsh.h	2023-07-22 12:04:51.138562678 +0200
@@ -9,11 +9,7 @@
 
 class LSH {
 public:
-  LSH(int k, int nbits) : k_{k}, nbits_{nbits} {
-#if !BLAS_FOUND
-    ABORT("LSH-based output approximation requires BLAS library");
-#endif
-  }
+  LSH(int k, int nbits) : k_{k}, nbits_{nbits} {}
 
   Expr apply(Expr query, Expr values, Expr bias);
 
diff -ruN '--exclude=*.user' bergamot-org/3rd_party/marian-dev/src/tensors/cpu/integer_common.h bergamot-patched/3rd_party/marian-dev/src/tensors/cpu/integer_common.h
--- bergamot-org/3rd_party/marian-dev/src/tensors/cpu/integer_common.h	2023-07-08 17:36:56.243446352 +0200
+++ bergamot-patched/3rd_party/marian-dev/src/tensors/cpu/integer_common.h	2023-07-31 11:43:04.106649054 +0200
@@ -27,6 +27,13 @@
 namespace cpu {
 namespace integer {
 
+template<typename T>
+T safe_dereference(const T* ptr) {
+   T value;
+   memcpy(&value, ptr, sizeof(value));
+   return value;
+}
+
 // Making sure we have access to common functions for RUY and INTGEMM
 class fetchAlphaFromModelNodeOp : public UnaryNodeOp {
 public:
@@ -124,13 +131,13 @@
         ABORT_IF(intgemm_<vtype>::intgemmType == Type::intgemm16,
                 "Int16::PrepareBQuantizedTransposed is not implemented for wasm.");
         int8PrepareBFromQuantizedTransposed(reinterpret_cast<const int8_t *>(input),
-                                        (Index)rows(item.shape),  //Since we only transposed, but didn't update the shape when constructing the binary 
+                                        (Index)rows(item.shape),  //Since we only transposed, but didn't update the shape when constructing the binary
                                         (Index)cols(item.shape), //rows here returns the columns of the transposed input matrix, and cols -> the rows
                                         (int8_t *)output_tensor);
     #elif defined(USE_INTGEMM)
         intgemm_<vtype>::width::PrepareBQuantizedTransposed(reinterpret_cast<const Integer *>(input),
                                                    output_tensor,
-                                                   rows(item.shape),  //Since we only transposed, but didn't update the shape when constructing the binary, 
+                                                   rows(item.shape),  //Since we only transposed, but didn't update the shape when constructing the binary,
                                                    cols(item.shape)); //rows here returns the columns of the transposed input matrix, and cols -> the rows
     #endif
     } else {
@@ -141,13 +148,13 @@
         ABORT_IF(intgemm_<vtype>::intgemmType == Type::intgemm16,
                 "Int16::PrepareBQuantizedTransposed is not implemented for wasm.");
         int8PrepareBFromQuantizedTransposed(reinterpret_cast<const int8_t *>(aligned_input),
-                                        (Index)rows(item.shape),  //Since we only transposed, but didn't update the shape when constructing the binary, 
+                                        (Index)rows(item.shape),  //Since we only transposed, but didn't update the shape when constructing the binary,
                                         (Index)cols(item.shape), //rows here returns the columns of the transposed input matrix, and cols -> the rows
                                         reinterpret_cast<int8_t *>(aligned_output));
     #elif defined(USE_INTGEMM)
         intgemm_<vtype>::width::PrepareBQuantizedTransposed(reinterpret_cast<const Integer *>(aligned_input),
                                                    reinterpret_cast<Integer *>(aligned_output),
-                                                   rows(item.shape),  //Since we only transposed, but didn't update the shape when constructing the binary, 
+                                                   rows(item.shape),  //Since we only transposed, but didn't update the shape when constructing the binary,
                                                    cols(item.shape)); //rows here returns the columns of the transposed input matrix, and cols -> the rows
     #endif
         // Copy to output tensor
@@ -157,7 +164,7 @@
     }
 #endif
     //Copy the quantMult
-    float quantMult = *(reinterpret_cast<const float *>(reinterpret_cast<const Integer *>(input) + item.shape.elements()));
+    float quantMult = safe_dereference<float>(reinterpret_cast<const float *>(reinterpret_cast<const Integer *>(input) + item.shape.elements()));
     *(reinterpret_cast<float *>(&(*(output_tensor + item.shape.elements())))) = quantMult;
 #else // COMPILE_CPU
     ABORT("Using intgemm models is supported only with -DCOMPILE_CPU=on");
@@ -167,7 +174,7 @@
 template<Type vtype>
 void unquantizeWemb(io::Item& item, const char * input) {
     typedef typename intgemm_<vtype>::type Integer;
-    float quantMult = *(reinterpret_cast<const float *>(reinterpret_cast<const Integer *>(input) + item.shape.elements()));
+    float quantMult = safe_dereference<float>(reinterpret_cast<const float *>(reinterpret_cast<const Integer *>(input) + item.shape.elements()));
     float * output_tensor = reinterpret_cast<float *>(&(*item.bytes.begin()));
     // Explicitly calculate n once beforehand because the compiler does not pick up on its
     // static nature, and will end up calling marian::Shape::dim() a lot.
diff -ruN '--exclude=*.user' bergamot-org/3rd_party/marian-dev/src/tensors/cpu/ruy_interface.h bergamot-patched/3rd_party/marian-dev/src/tensors/cpu/ruy_interface.h
--- bergamot-org/3rd_party/marian-dev/src/tensors/cpu/ruy_interface.h	2023-07-08 17:36:56.243446352 +0200
+++ bergamot-patched/3rd_party/marian-dev/src/tensors/cpu/ruy_interface.h	2023-07-31 16:19:47.100665027 +0200
@@ -28,6 +28,30 @@
 
 #if RUY_PLATFORM_NEON
 
+#ifdef RUY_PLATFORM_NEON_32
+inline static int32x4_t vcvtnq_s32_f32(float32x4_t v) {
+  int32x4_t result;
+  float32_t temp[4];
+
+  vst1q_f32(temp, v);
+
+  for (int i = 0; i < 4; i++) {
+    if (temp[i] == -0.5f) {
+      result[i] = 0;
+    } else {
+      int32_t truncated = (int32_t)(temp[i] + (temp[i] < 0 ? -0.5f : 0.5f));
+      if (temp[i] + (temp[i] < 0 ? -0.5f : 0.5f) == truncated + 0.5f && truncated % 2 != 0) {
+        result[i] = truncated - 1 + (temp[i] < 0 ? 1 : 0);
+      } else {
+        result[i] = truncated;
+      }
+    }
+  }
+
+  return result;
+}
+#endif
+
 /*
  * Optimized path using ARM NEON SIMD intrinsics. Currently only supports int8_t.
  */
@@ -93,7 +117,7 @@
   // permute n simd_width/2-bit rows
 
   // clang-format off
-    
+
     // Permute 8 8-bit rows.
     // Load int8x16x2 from memory into SIMD registers, transpose as 2x2 matrices.
 
@@ -132,10 +156,10 @@
     int32x4x2_t x6 = vtrnq_s32(vreinterpretq_s32_s16(t2.val[1]), vreinterpretq_s32_s16(t3.val[1]));
     int32x4x2_t x7 = vtrnq_s32(vreinterpretq_s32_s16(t6.val[1]), vreinterpretq_s32_s16(t7.val[1]));
 
-    // There is no permute 8 64-bit rows available. 
+    // There is no permute 8 64-bit rows available.
     // Instead we follow extracting low and high and placing them into the right places.
     Index dstRowBegin = j*rows + i;
-    vst1q_s8(&dst[ 0*rows + dstRowBegin], vreinterpretq_s8_s32(vcombine_s32( vget_low_s32(x0.val[0]),  vget_low_s32(x4.val[0])))); 
+    vst1q_s8(&dst[ 0*rows + dstRowBegin], vreinterpretq_s8_s32(vcombine_s32( vget_low_s32(x0.val[0]),  vget_low_s32(x4.val[0]))));
     vst1q_s8(&dst[ 1*rows + dstRowBegin], vreinterpretq_s8_s32(vcombine_s32( vget_low_s32(x1.val[0]),  vget_low_s32(x5.val[0]))));
     vst1q_s8(&dst[ 2*rows + dstRowBegin], vreinterpretq_s8_s32(vcombine_s32( vget_low_s32(x2.val[0]),  vget_low_s32(x6.val[0]))));
     vst1q_s8(&dst[ 3*rows + dstRowBegin], vreinterpretq_s8_s32(vcombine_s32( vget_low_s32(x3.val[0]),  vget_low_s32(x7.val[0]))));
diff -ruN '--exclude=*.user' bergamot-org/bergamot_api.cpp bergamot-patched/bergamot_api.cpp
--- bergamot-org/bergamot_api.cpp	1970-01-01 01:00:00.000000000 +0100
+++ bergamot-patched/bergamot_api.cpp	2023-12-14 19:30:25.683358065 +0100
@@ -0,0 +1,89 @@
+#include "bergamot_api.h"
+
+#include <future>
+#include <vector>
+
+#include "translator/response.h"
+#include "translator/response_options.h"
+#include "translator/service.h"
+#include "translator/translation_model.h"
+
+struct bergamot_api::ctx {
+  marian::bergamot::AsyncService service;
+  std::shared_ptr<marian::bergamot::TranslationModel> model;
+
+  ctx(size_t num_workers, size_t cache_size, std::string log_level)
+      : service{marian::bergamot::AsyncService::Config{/*numWorkers=*/num_workers,
+                                                       /*cacheSize=*/cache_size,
+                                                       /*logger=*/{/*level=*/std::move(log_level)}}} {}
+};
+
+bergamot_api::bergamot_api(std::string model_path, std::string src_vocab_path, std::string trg_vocab_path,
+                           std::string shortlist_path, size_t num_workers, size_t cache_size, std::string log_level) {
+  marian::setThrowExceptionOnAbort(true);
+
+  m_ctx = std::make_unique<ctx>(num_workers, cache_size, std::move(log_level));
+
+  m_ctx->model = m_ctx->service.createCompatibleModel(marian::New<marian::Options>(
+      "models", std::vector<std::string>{std::move(model_path)}, "vocabs",
+      std::vector<std::string>{std::move(src_vocab_path), std::move(trg_vocab_path)}, "shortlist",
+      std::vector<std::string>{std::move(shortlist_path)}, "max-length-break", 100, "ssplit-mode", "paragraph",
+      "mini-batch-words", 1024, "clip-gemm", 0, "gemm-precision", "float32", "dump-quantmult", false,
+      "use-legacy-batching", false, "workspace", 512, "ignore-model-config", false, "model-mmap", false, "dim-vocabs",
+      0, "dim-emb", 512, "lemma-dim-emb", 0, "dim-rnn", 1024, "enc-type", "bidirectional", "enc-cell", "gru",
+      "enc-cell-depth", 1, "enc-depth", 1, "dec-cell", "gru", "dec-cell-base-depth", 2, "dec-cell-high-depth", 1,
+      "dec-depth", 1, "skip", false, "layer-normalization", false, "right-left", false, "input-types",
+      std::vector<std::string>{}, "best-deep", false, "tied-embeddings", false, "tied-embeddings-src", false,
+      "tied-embeddings-all", false, "output-omit-bias", false, "transformer-heads", 8, "transformer-no-projection",
+      false, "transformer-pool", false, "transformer-dim-ffn", 2048, "transformer-ffn-depth", 2,
+      "transformer-ffn-activation", "swish", "transformer-dim-aan", 2048, "transformer-aan-depth", 2,
+      "transformer-aan-activation", "swish", "transformer-aan-nogate", false, "transformer-decoder-autoreg",
+      "self-attention", "transformer-guided-alignment-laye", "last", "use-legacy-batching", false, "skip-cost", false,
+      "precision", std::vector<std::string>{"float32"}, "output-sampling", false, "output-approx-knn",
+      std::vector<int>{100, 1024}, "beam-size", 12, "normalize", 0.0, "max-length-factor", 3.0, "allow-unk", false,
+      "word-scores", true, "valid-mini-batch", 32, "valid-max-length", 1000, "word-penalty", 0.0, "n-best", false,
+      "alignment", "1.0", "no-spm-decode", false));
+}
+
+bergamot_api::~bergamot_api() {}
+
+std::string bergamot_api::translate(std::string text, bool text_is_html) {
+  marian::bergamot::ResponseOptions response_options;
+  response_options.HTML = text_is_html;
+
+  std::promise<marian::bergamot::Response> promise;
+  auto future = promise.get_future();
+  auto callback = [&promise](marian::bergamot::Response&& response) { promise.set_value(std::move(response)); };
+
+  m_ctx->service.translate(m_ctx->model, std::move(text), callback, response_options);
+
+  auto response = future.get();
+
+  return response.target.text;
+}
+
+static std::string glo_text{};
+
+void bergamot_api::cancel() { m_ctx->service.clear(); }
+
+void* bergamot_api_make(const char* model_path, const char* src_vocab_path, const char* trg_vocab_path,
+                        const char* shortlist_path, size_t num_workers, size_t cache_size,
+                        const char* log_level) {
+  return new bergamot_api(model_path, src_vocab_path, trg_vocab_path,
+                          shortlist_path, num_workers, cache_size, log_level ? log_level : "off");
+}
+
+void bergamot_api_delete(void* handle) {
+  glo_text.clear();
+
+  if (handle)
+    delete static_cast<bergamot_api*>(handle);
+}
+
+const char* bergamot_api_translate(void* handle, const char* text, bool text_is_html) {
+  glo_text = static_cast<bergamot_api*>(handle)->translate(text, text_is_html);
+  return glo_text.c_str();
+}
+void bergamot_api_cancel(void* handle) {
+  static_cast<bergamot_api*>(handle)->cancel();
+}
diff -ruN '--exclude=*.user' bergamot-org/bergamot_api.h bergamot-patched/bergamot_api.h
--- bergamot-org/bergamot_api.h	1970-01-01 01:00:00.000000000 +0100
+++ bergamot-patched/bergamot_api.h	2023-12-13 15:10:15.516819002 +0100
@@ -0,0 +1,38 @@
+#ifndef BERGAMOT_API_H
+#define BERGAMOT_API_H
+
+#define BERGAMOT_API_EXPORT __attribute__((visibility("default")))
+
+#include <memory>
+#include <string>
+
+class BERGAMOT_API_EXPORT bergamot_api {
+ public:
+  bergamot_api(std::string model_path, std::string src_vocab_path, std::string trg_vocab_path,
+               std::string shortlist_path, size_t num_workers = 1,
+               size_t cache_size = 0, std::string log_level = {"off"});
+  ~bergamot_api();
+  std::string translate(std::string text, bool text_is_html);
+  void cancel();
+
+ private:
+  struct ctx;
+  std::unique_ptr<ctx> m_ctx;
+};
+
+/* c api */
+
+extern "C" {
+BERGAMOT_API_EXPORT
+void* bergamot_api_make(const char* model_path, const char* src_vocab_path, const char* trg_vocab_path,
+                        const char* shortlist_path, size_t num_workers, size_t cache_size,
+                        const char* log_level);
+
+BERGAMOT_API_EXPORT void bergamot_api_delete(void* handle);
+
+BERGAMOT_API_EXPORT const char* bergamot_api_translate(void* handle, const char* text, bool text_is_html);
+
+BERGAMOT_API_EXPORT void bergamot_api_cancel(void* handle);
+}
+
+#endif  // BERGAMOT_API_H
diff -ruN '--exclude=*.user' bergamot-org/CMakeLists.txt bergamot-patched/CMakeLists.txt
--- bergamot-org/CMakeLists.txt	2023-07-08 17:36:50.510112843 +0200
+++ bergamot-patched/CMakeLists.txt	2023-11-20 11:53:08.937187708 +0100
@@ -53,7 +53,7 @@
 if(MSVC)
   add_definitions(-DUSE_SSE2=1) # Supposed to fix something in the sse_mathfun.h but not sure it does
   set(INTRINSICS ${MSVC_BUILD_ARCH}) # ARCH we're targetting on win32. @TODO variable
-  
+
   set(CMAKE_CXX_FLAGS           "/EHsc /DWIN32 /D_WINDOWS /DUNICODE /D_UNICODE /D_CRT_NONSTDC_NO_WARNINGS /D_CRT_SECURE_NO_WARNINGS /bigobj")
   set(CMAKE_CXX_FLAGS_RELEASE   "${CMAKE_CXX_FLAGS} /MT /O2 ${INTRINSICS} /MP /GL /DNDEBUG")
   set(CMAKE_CXX_FLAGS_DEBUG     "${CMAKE_CXX_FLAGS} /MTd /Od /Ob0 ${INTRINSICS} /RTC1 /Zi /D_DEBUG")
@@ -174,7 +174,20 @@
 if(COMPILE_WASM)
   add_subdirectory(wasm)
 else()
-  add_subdirectory(app)
+  if (NOT DEFINED BERGAMOTAPI_TARGET_NAME)
+      set(BERGAMOTAPI_TARGET_NAME bergamot_api)
+  endif()
+
+  set(TARGET ${BERGAMOTAPI_TARGET_NAME})
+
+  add_library(${TARGET} SHARED bergamot_api.cpp)
+  target_link_libraries(${TARGET} PRIVATE bergamot-translator)
+
+  set_target_properties(${TARGET} PROPERTIES PUBLIC_HEADER "bergamot_api.h")
+  install(TARGETS ${TARGET}
+      LIBRARY DESTINATION lib
+      ARCHIVE DESTINATION lib
+      PUBLIC_HEADER DESTINATION include)
 endif(COMPILE_WASM)
 
 option(COMPILE_PYTHON "Compile python bindings. Intended to be activated with setup.py" OFF)
Binary files bergamot-org/.git/index and bergamot-patched/.git/index differ
Binary files bergamot-org/.git/modules/3rd_party/marian-dev/index and bergamot-patched/.git/modules/3rd_party/marian-dev/index differ
diff -ruN '--exclude=*.user' bergamot-org/src/translator/logging.h bergamot-patched/src/translator/logging.h
--- bergamot-org/src/translator/logging.h	2023-07-08 17:36:50.513446177 +0200
+++ bergamot-patched/src/translator/logging.h	2023-07-10 19:45:04.590367854 +0200
@@ -16,7 +16,7 @@
     }
   };
 
-  Logger(const Config &config) : marianLoggers_(createLoggers()) {
+  Logger(const Config &config) {
     // We are manually creating loggers, because this is usually created in marian as a side-effect of
     // config-parsing.
     for (auto &logger : marianLoggers_) {
